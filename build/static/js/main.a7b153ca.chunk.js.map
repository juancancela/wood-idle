{"version":3,"sources":["madera.png","piedra.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","cantidadMadera","setCantidadMadera","nivel","multiplicador","costo","setNivel","niveles","className","src","madera","piedra","type","onClick","map","nivelLevel","comprarNivel","nivelActual","nivelBoton","etiquetaBotonNivel","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,iNCkI5BC,MA5Hf,WAAgB,IAAD,EAC+BC,mBAAS,IADxC,mBACNC,EADM,KACUC,EADV,OAEaF,mBAAS,CACjCG,MAAO,EACPC,cAAe,EACfC,MAAO,IALI,mBAENF,EAFM,KAECG,EAFD,KAyBPC,EAAU,CACd,CACEJ,MAAO,EACPC,cAAe,EACfC,MAAO,KAET,CACEF,MAAO,EACPC,cAAe,EACfC,MAAO,KAET,CACEF,MAAO,EACPC,cAAe,EACfC,MAAO,KAET,CACEF,MAAO,EACPC,cAAe,GACfC,MAAO,KAET,CACEF,MAAO,EACPC,cAAe,IACfC,MAAO,MAkCX,OACE,yBAAKG,UAAU,cACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,qBACb,6BACE,yBAAKA,UAAU,eAAeC,IAAKC,MACnC,yBAAKF,UAAU,sBAAsBP,IAEvC,6BACE,yBAAKO,UAAU,eAAeC,IAAKE,MACnC,yBAAKH,UAAU,sBAAf,qBAGJ,yBAAKA,UAAU,oBACb,6BACE,8CAAoBL,EAAMA,OAC1B,4BACES,KAAK,SACLJ,UAAU,6BACVK,QAAS,kBACPX,EAAkBD,EAAiBE,EAAMC,iBAJ7C,WA5CN,6BACGG,EAAQO,KAAI,SAACC,GACZ,KAAIZ,EAAMA,OAASY,EAAWZ,OAC9B,OACE,yBAAKK,UAAU,WACb,sCACSO,EAAWZ,MADpB,YACoCY,EAAWV,OAE/C,4BACEG,UAAU,kBACVK,QAAS,kBAzDF,SAACZ,EAAgBI,EAAOF,GACvCE,EAAQJ,IACZK,EAASH,GACTD,EAAkBD,EAAiBI,IAuDrBW,CAAaf,EAAgBc,EAAWV,MAAOU,KApDpC,SACzBd,EACAI,EACAY,EACAC,GAEA,OAAID,GAAeC,EAAmB,kBAClCb,EAAQJ,EAAuB,sBAC5B,UA+CMkB,CACClB,EACAc,EAAWV,MACXF,EAAMA,MACNY,EAAWZ,eAuCvB,yBAAKK,UAAU,yBACb,uBACEY,KAAK,iDACLC,OAAO,UAFT,oCC3GYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a7b153ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/madera.41c42379.png\";","module.exports = __webpack_public_path__ + \"static/media/piedra.11ceffbd.png\";","import React, {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport madera from './madera.png';\nimport './App.css';\nimport piedra from './piedra.png'; //<img src={madera} className=\"App-logo\" alt=\"logo\" />\n\nfunction App() {\n  const [cantidadMadera, setCantidadMadera] = useState(90);\n  const [nivel, setNivel] = useState({\n    nivel: 1,\n    multiplicador: 1,\n    costo: 0,\n  });\n\n  const comprarNivel = (cantidadMadera, costo, nivel) => {\n    if (costo > cantidadMadera) return;\n    setNivel(nivel);\n    setCantidadMadera(cantidadMadera - costo);\n  };\n\n  const etiquetaBotonNivel = (\n    cantidadMadera,\n    costo,\n    nivelActual,\n    nivelBoton\n  ) => {\n    if (nivelActual >= nivelBoton) return 'Nivel Comprado!';\n    if (costo > cantidadMadera) return 'Madera insuficiente';\n    return 'Comprar';\n  };\n\n  const niveles = [\n    {\n      nivel: 2,\n      multiplicador: 2,\n      costo: 100,\n    },\n    {\n      nivel: 3,\n      multiplicador: 5,\n      costo: 200,\n    },\n    {\n      nivel: 4,\n      multiplicador: 8,\n      costo: 1000,\n    },\n    {\n      nivel: 5,\n      multiplicador: 20,\n      costo: 10000,\n    },\n    {\n      nivel: 6,\n      multiplicador: 100,\n      costo: 100000,\n    },\n  ];\n\n  const ListaDeNiveles = () => {\n    return (\n      <div>\n        {niveles.map((nivelLevel) => {\n          if (nivel.nivel >= nivelLevel.nivel) return;\n          return (\n            <div className=\"niveles\">\n              <div>\n                Nivel {nivelLevel.nivel}: Coste: {nivelLevel.costo}\n              </div>\n              <button\n                className=\"btn btn-success\"\n                onClick={() =>\n                  comprarNivel(cantidadMadera, nivelLevel.costo, nivelLevel)\n                }\n              >\n                {etiquetaBotonNivel(\n                  cantidadMadera,\n                  nivelLevel.costo,\n                  nivel.nivel,\n                  nivelLevel.nivel\n                )}\n              </button>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"contenedor\">\n      <div className=\"contenedor-juego\">\n        <div className=\"menu-arriba-juego\">\n          <div>\n            <img className=\"icono-madera\" src={madera} />\n            <div className=\"icono-madera-texto\">{cantidadMadera}</div>\n          </div>\n          <div>\n            <img className=\"icono-madera\" src={piedra} />\n            <div className=\"icono-madera-texto\">No Implementado</div>\n          </div>\n        </div>\n        <div className=\"menu-abajo-juego\">\n          <div>\n            <div>Nivel actual: {nivel.nivel}</div>\n            <button\n              type=\"button\"\n              className=\"btn btn-light boton-madera\"\n              onClick={() =>\n                setCantidadMadera(cantidadMadera + nivel.multiplicador)\n              }\n            >\n              Madera\n            </button>\n          </div>\n          {ListaDeNiveles()}\n        </div>\n      </div>\n      <div className=\"contenedor-publicidad\">\n        <a\n          href=\"https://www.instagram.com/tapir_de_los_montes/\"\n          target=\"_blank\"\n        >\n          VISITANOS EN INSTAGRAM AHORA!\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}